coffeescript = require 'coffee-script'
coffeecup = require 'coffeecup'
coffeemiddleware = require 'coffee-middleware'
express = require 'express'
morgan = require 'morgan'
servestatic = require 'serve-static'
fs = require 'fs'
path = require 'path'
http = require 'http'
https = require 'https'
busboy = require 'connect-busboy'

app = express()

app.set 'views', "#{__dirname}/webroot"
app.set 'view engine', 'coffee'
app.engine 'coffee', coffeecup.__express

app.use morgan 'dev'
app.use (req, res, next) ->
	decoded = decodeURIComponent req.url
	if decoded isnt path.join '/', decoded
		res.writeHead 403, "Content-Type": "text/plain"
		res.write "Yo dawg, I heard you liked paths so I put paths in your paths so you can traverse paths while you're traversing paths.\n"
		res.end()
	else
		next()
app.use coffeemiddleware src: "#{__dirname}/webroot"
app.use busboy()
app.use servestatic "#{__dirname}/webroot"

helpers = {}
helpers["_#{f.slice 0, -3}"] = require "./include/#{f}" for f in fs.readdirSync('./include') when f.slice(-3) is ".js"

app.get '/', (req, res) ->
	res.render 'index', empty: '', hardcode: helpers
app.post '/upload', (req, res) ->
	req.pipe req.busboy
	req.busboy.on 'file', (fieldname, file, filename) ->
		filepath = "#{__dirname}/webroot/resources/userMusic/#{filename}"
		if filepath isnt path.join '/', filepath
			res.writeHead 403, "Content-Type": "text/plain"
			res.write "The directory traversal is strong in this one."
			res.end()
		else
			fstream = fs.createWriteStream filepath
			file.pipe fstream
			fstream.on 'close', ->
				fs.chownSync filepath, 'www-data, 'www-data'
				fs.chmodSync filepath, 
				res.writeHead 200
				res.write "File uploaded successfuly"
				res.end()

options =
	key: fs.readFileSync "#{__dirname}/certs/server.key"
	cert: fs.readFileSync "#{__dirname}/certs/server.crt"

wwwdata = -> process.setuid "www-data"
localhost = "0.0.0.0"

httpServer = http.createServer (req, res) ->
	res.writeHead 301, "Content-Type": "text/plain", "Location": "https://#{req.headers.host + req.url}"
	res.end()
httpsServer = https.createServer options, app
httpServer.listen 80, localhost, wwwdata
httpsServer.listen 443, localhost, wwwdata

console.log "Jarvis initialized"
