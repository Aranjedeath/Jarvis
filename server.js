// Generated by CoffeeScript 1.7.1
(function() {
  var app, busboy, cluster, coffeecup, coffeemiddleware, edt, express, f, fs, helpers, http, httpServer, https, httpsServer, i, localhost, morgan, numCPUs, options, os, path, servestatic, storage, wwwdata, _i, _j, _len, _ref;

  coffeecup = require('coffeecup');

  coffeemiddleware = require('coffee-middleware');

  express = require('express');

  morgan = require('morgan');

  servestatic = require('serve-static');

  fs = require('fs');

  path = require('path');

  http = require('http');

  https = require('https');

  busboy = require('connect-busboy');

  storage = require('node-persist');

  edt = require('express-directory-traversal');

  cluster = require('cluster');

  os = require('os');

  numCPUs = os.cpus().length;

  if (cluster.isMaster) {
    console.log("Jarvis initialized");
    for (i = _i = 1; 1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs; i = 1 <= numCPUs ? ++_i : --_i) {
      cluster.fork();
      console.log("Process " + i + " started");
    }
    cluster.on("exit", function(worker, code, signal) {
      return cluster.fork();
    });
  } else {
    storage.initSync();
    
	var compile = function (fmt) {
		fmt = fmt.replace(/"/g, '\\"');
		var js = '  return "' + fmt.replace(/:([-\w]{2,})(?:\[([^\]]+)\])?/g, function(_, name, arg){
		        return '"\n    + (tokens["' + name + '"](req, res, "' + arg + '") || "-") + "';
		}) + '";'
		return new Function('tokens, req, res', js);
	};
	;
    morgan.format('dev++', function(tokens, req, res) {
      var color, fn, status;
      color = 32;
      status = res.statusCode;
      if (status >= 500) {
        color = 31;
      } else if (status >= 400) {
        color = 33;
      } else if (status >= 300) {
        color = 36;
      }
      fn = compile("\x1b[90m:remote-addr \x1b[32m:method \x1b[35m:url \x1b[" + color + "m:status \x1b[97m:response-time ms\x1b[0m");
      return fn(tokens, req, res);
    });
    app = express();
    app.set('views', "" + __dirname + "/webroot");
    app.set('view engine', 'coffee');
    app.engine('coffee', coffeecup.__express);
    app.use(morgan({
      stream: {
        write: function(str) {
          return fs.appendFileSync("" + __dirname + "/log/long.log", str);
        }
      }
    }));
    app.use(morgan({
      format: "dev++",
      stream: {
        write: function(str) {
          return fs.appendFileSync("" + __dirname + "/log/short.log", str);
        }
      }
    }));
    app.use(edt("Yo dawg, I heard you liked paths so I put paths in your paths so you can traverse paths while you're traversing paths.\n"));
    app.use(coffeemiddleware({
      src: "" + __dirname + "/webroot"
    }));
    app.use(busboy({
      limits: {
        fileSize: 20 * 1024 * 1024
      }
    }));
    app.use(servestatic("" + __dirname + "/webroot"));
    helpers = {};
    _ref = fs.readdirSync('./include');
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      f = _ref[_j];
      if (f.slice(-7) === ".coffee") {
        helpers["_" + (f.slice(0, -7))] = require("./include/" + f);
      }
    }
    app.get('/', function(req, res) {
      return res.render('index', {
        empty: '',
        hardcode: helpers
      });
    });
    app.get('/u', function(req, res) {
      return storage.values(function(links) {
        var link, _k, _len1;
        console.log(links);
        res.writeHead(200, {
          "Content-Type": "text/html"
        });
        res.write("<html><body>");
        res.write("<p>Usage:<br> https://jarvispa.info/u/short/long -- makes a new link<br> https://jarvispa.info/u/short -- accesses a link<br></p>");
        res.write("<p>Existing links:</p>");
        res.write("<style>table,table td,table th{border:1px solid black}</style>");
        res.write("<table><tablebody>");
        res.write("<tr><th>Short</th><th>Long</th></tr>");
        for (_k = 0, _len1 = links.length; _k < _len1; _k++) {
          link = links[_k];
          res.write("<tr><td>" + link.short + "</td><td>" + link.long + "</td></tr>");
        }
        res.write("</tablebody></table>");
        res.write("</body></html>");
        return res.end();
      });
    });
    app.get('/u/:short', function(req, res) {
      if (storage.getItem(req.params.short) != null) {
        return res.redirect(storage.getItem(req.params.short).long);
      } else {
        return res.end('No url here :-(');
      }
    });
    app.get('/u/:short/:long', function(req, res) {
      storage.setItem(req.params.short, {
        short: req.params.short,
        long: "http://" + decodeURIComponent(req.params.long)
      });
      return res.end("https://jarvispa.info/u/" + req.params.short + "  ->  " + (decodeURIComponent(req.params.long)));
    });
    app.get('/resources/userMusic', function(req, res) {
      return fs.readdir("" + __dirname + "/webroot/resources/userMusic", function(err, files) {
        var file, _k, _len1;
        if (err) {
          res.writeHead(500, {
            "Content-Type": "text/plain"
          });
          res.write("Internal error fetching music list");
          res.end();
          return console.log(err.message);
        } else {
          res.writeHead(200, {
            "Content-Type": "text/plain"
          });
          for (_k = 0, _len1 = files.length; _k < _len1; _k++) {
            file = files[_k];
            res.write("" + file + "\n");
          }
          return res.end();
        }
      });
    });
    app.post('/upload', function(req, res) {
      req.pipe(req.busboy);
      return req.busboy.on('file', function(fieldname, file, filename) {
        var filepath, fstream;
        filename = filename.replace(RegExp(' ', 'g'), '_').replace(/[^A-Z0-9._-]/ig, '').toLowerCase();
        filepath = "" + __dirname + "/webroot/resources/userMusic/" + filename;
        if (filepath !== path.join('/', filepath)) {
          res.writeHead(403, {
            "Content-Type": "text/plain"
          });
          res.write("The directory traversal is strong in this one.");
          return res.end();
        } else {
          fstream = fs.createWriteStream(filepath);
          file.pipe(fstream);
          return fstream.on('close', function() {
            res.writeHead(200);
            res.write("File uploaded successfuly");
            return res.end();
          });
        }
      });
    });
    app.get('*', function(req, res) {
      res.status(404);
      if (req.accepts('html')) {
        return res.render('404', {
          empty: '',
          hardcode: helpers
        });
      } else {
        res.write('404 not found');
        return res.end();
      }
    });
    options = {
      key: fs.readFileSync("" + __dirname + "/certs/server.key"),
      cert: fs.readFileSync("" + __dirname + "/certs/server.crt")
    };
    wwwdata = function() {
      return process.setuid("www-data");
    };
    localhost = "0.0.0.0";
    httpServer = http.createServer(function(req, res) {
      res.writeHead(301, {
        "Content-Type": "text/plain",
        "Location": "https://" + (req.headers.host + req.url)
      });
      return res.end();
    });
    httpsServer = https.createServer(options, app);
    httpServer.listen(80, localhost, wwwdata);
    httpsServer.listen(443, localhost, wwwdata);
  }

}).call(this);
