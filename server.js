// Generated by CoffeeScript 1.7.1
(function() {
  var app, coffeecup, coffeescript, express, f, fs, helpers, http, httpServer, https, httpsServer, localhost, morgan, options, servestatic, wwwdata, _i, _len, _ref;

  coffeescript = require('coffee-script');

  coffeecup = require('coffeecup');

  express = require('express');

  morgan = require('morgan');

  servestatic = require('serve-static');

  fs = require('fs');

  http = require('http');

  https = require('https');

  app = express();

  app.set('views', "" + __dirname + "/webroot");

  app.set('view engine', 'coffee');

  app.engine('coffee', coffeecup.__express);

  app.use(morgan('dev'));

  app.use(function(req, res, next) {
    var matched;
    if (/(\/.*\w+)\.js/.test(req.url)) {
      matched = /(\/.*\w+)\.js/.exec(req.url);
      return fs.readFile("" + __dirname + "/webroot" + matched[1] + ".coffee", function(err, data) {
        console.log("Changing route from " + req.url + " to " + matched[1] + ".coffee");
        req.url = "" + matched[1] + ".coffee";
        return next();
      });
    } else {
      console.log("" + req.url);
      return next();
    }
  });

  app.use(servestatic("" + __dirname + "/webroot"));

  helpers = {};

  _ref = fs.readdirSync('./include');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    f = _ref[_i];
    if (f.slice(-3) === ".js") {
      helpers["_" + (f.slice(0, -3))] = require("./include/" + f);
    }
  }

  app.get('/', function(req, res) {
    return res.render('index', {
      empty: '',
      hardcode: helpers
    });
  });

  options = {
    key: fs.readFileSync("" + __dirname + "/certs/server.key"),
    cert: fs.readFileSync("" + __dirname + "/certs/server.crt")
  };

  wwwdata = function() {
    return process.setuid("www-data");
  };

  localhost = "0.0.0.0";

  httpServer = http.createServer(function(req, res) {
    res.writeHead(301, {
      "Content-Type": "text/plain",
      "Location": "https://" + (req.headers.host + req.url)
    });
    return res.end();
  });

  httpsServer = https.createServer(options, app);

  httpServer.listen(80, localhost, wwwdata);

  httpsServer.listen(443, localhost, wwwdata);

  console.log("Jarvis initialized");

}).call(this);
